# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import itertools
import math

def first_triangle_number(divisors):
    def number_of_divisors(triangle):
        count = 0
        sentinel = math.sqrt(triangle)
        
        for i in xrange(1, int(sentinel+1)):
            if triangle % i == 0:
                count += 1
        if int(sentinel)**2 == triangle:
            return count * 2 - 1
        else:
            return count * 2
    for i in itertools.count(2, 1):
        triangle = reduce(lambda x, y: x+y, xrange(0, i))
        if divisors > number_of_divisors(triangle):
            pass
        elif divisors == number_of_divisors(triangle):
            return triangle
        else:
            return None
        

for i in itertools.count(500):
    triangle = first_triangle_number(i)
    if triangle is not None:
        print triangle
        break
                          
                          
                               
